/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TimeEntry } from "./TimeEntry";
import { TimeEntryCountArgs } from "./TimeEntryCountArgs";
import { TimeEntryFindManyArgs } from "./TimeEntryFindManyArgs";
import { TimeEntryFindUniqueArgs } from "./TimeEntryFindUniqueArgs";
import { CreateTimeEntryArgs } from "./CreateTimeEntryArgs";
import { UpdateTimeEntryArgs } from "./UpdateTimeEntryArgs";
import { DeleteTimeEntryArgs } from "./DeleteTimeEntryArgs";
import { Work } from "../../work/base/Work";
import { TimeEntryService } from "../timeEntry.service";
@graphql.Resolver(() => TimeEntry)
export class TimeEntryResolverBase {
  constructor(protected readonly service: TimeEntryService) {}

  async _timeEntriesMeta(
    @graphql.Args() args: TimeEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TimeEntry])
  async timeEntries(
    @graphql.Args() args: TimeEntryFindManyArgs
  ): Promise<TimeEntry[]> {
    return this.service.timeEntries(args);
  }

  @graphql.Query(() => TimeEntry, { nullable: true })
  async timeEntry(
    @graphql.Args() args: TimeEntryFindUniqueArgs
  ): Promise<TimeEntry | null> {
    const result = await this.service.timeEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TimeEntry)
  async createTimeEntry(
    @graphql.Args() args: CreateTimeEntryArgs
  ): Promise<TimeEntry> {
    return await this.service.createTimeEntry({
      ...args,
      data: {
        ...args.data,

        work: args.data.work
          ? {
              connect: args.data.work,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TimeEntry)
  async updateTimeEntry(
    @graphql.Args() args: UpdateTimeEntryArgs
  ): Promise<TimeEntry | null> {
    try {
      return await this.service.updateTimeEntry({
        ...args,
        data: {
          ...args.data,

          work: args.data.work
            ? {
                connect: args.data.work,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeEntry)
  async deleteTimeEntry(
    @graphql.Args() args: DeleteTimeEntryArgs
  ): Promise<TimeEntry | null> {
    try {
      return await this.service.deleteTimeEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Work, {
    nullable: true,
    name: "work",
  })
  async getWork(@graphql.Parent() parent: TimeEntry): Promise<Work | null> {
    const result = await this.service.getWork(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
